import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

# Generate random input data
np.random.seed(0)
tf.random.set_seed(0)

x= np.random.rand(1000,1) * 2 - 1
# Make first 50 values negative
x[:500] = x[:500] * -1
y = np.sin(2 * np.pi * x)

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='tanh'),
    tf.keras.layers.Dense(64, activation='tanh'),
    tf.keras.layers.Dense(32, activation='tanh'),
    tf.keras.layers.Dense(16, activation='tanh'),
    tf.keras.layers.Dense(8, activation='tanh'),
    tf.keras.layers.Dense(4, activation='tanh'),
    tf.keras.layers.Dense(1)
])

# Compile the model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss='mean_squared_error')

# Train the model
history = model.fit(x, y, epochs=200, verbose=1)

# Make predictions using the trained model
y_pred = model.predict(x)

# Plot the original and predicted data
plt.scatter(x, y, s=15, label='Original Data')
sorted_zip = sorted(zip(x,y_pred), key=lambda x: x[0])
x, y_pred = zip(*sorted_zip)
plt.plot(x, y_pred, color='m', label='Predicted Data')
plt.legend(loc='upper right')
plt.show()
